knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
# cache=TRUE
con <- dbConnect(
MySQL(), host = "traffic.st47s.com", user = "student",
password = "Sagehen47", dbname = "traffic")
library(RMySQL)
library(tidyverse)
library(broom)
library(lubridate)
library(stringr)
library(kableExtra)
library(grid)
library(gridExtra)
library(patchwork)
library(XML)
library(RCurl)
library(lutz)
library(suncalc)
con <- dbConnect(
MySQL(), host = "traffic.st47s.com", user = "student",
password = "Sagehen47", dbname = "traffic")
dataset_names <- dbGetQuery(con, "SHOW TABLES")[[1]]
# remove datasets with "_" in the name
dataset_names <- dataset_names[str_detect(dataset_names, "_", negate = TRUE)]
query_sample <- function(dataset_str, percent){
# input is dataset_str (str) with dataset name, and percent (dbl) for the random sample %
# output is the dataframe with a column added for the name of dataset and character NA's
# replaced with NA's
# global variable con is the SQL connection
command <- paste("SELECT * FROM", dataset_str, "WHERE rand() <=", percent,
# in SQL, filter for vehicular stops
" AND type = 'vehicular'",
sep = " ")
df <- dbGetQuery(con, command) %>% mutate(dataset_name = dataset_str)
# do not consider empty datasets
if (dim(df)[1] == 0){
return(NULL)
}
# replace character NA's with NA
if (sum(is.na(df) == 0)){
df[df == "NA"] = NA
}
return(df %>% dplyr::select(-type))
}
dataset_lst <- lapply(dataset_names, query_sample, 0.3)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
# cache=TRUE
con <- dbConnect(
MySQL(), host = "traffic.st47s.com", user = "student",
password = "Sagehen47", dbname = "traffic")
library(RMySQL)
library(tidyverse)
library(broom)
library(lubridate)
library(stringr)
library(kableExtra)
library(grid)
library(gridExtra)
library(patchwork)
library(XML)
library(RCurl)
library(lutz)
library(suncalc)
con <- dbConnect(
MySQL(), host = "traffic.st47s.com", user = "student",
password = "Sagehen47", dbname = "traffic")
dataset_names <- dbGetQuery(con, "SHOW TABLES")[[1]]
# remove datasets with "_" in the name
dataset_names <- dataset_names[str_detect(dataset_names, "_", negate = TRUE)]
query_sample <- function(dataset_str, percent){
# input is dataset_str (str) with dataset name, and percent (dbl) for the random sample %
# output is the dataframe with a column added for the name of dataset and character NA's
# replaced with NA's
# global variable con is the SQL connection
command <- paste("SELECT * FROM", dataset_str, "WHERE rand() <=", percent,
# in SQL, filter for vehicular stops
" AND type = 'vehicular'",
sep = " ")
df <- dbGetQuery(con, command) %>% mutate(dataset_name = dataset_str)
# do not consider empty datasets
if (dim(df)[1] == 0){
return(NULL)
}
# replace character NA's with NA
if (sum(is.na(df) == 0)){
df[df == "NA"] = NA
}
return(df %>% dplyr::select(-type))
}
dataset_lst <- lapply(dataset_names, query_sample, 0.3)
# will need to save to and load rdata when knitting so that the coefficient results are the same
# remove empty datasets through logical indexing
dataset_lst <- dataset_lst[sapply(dataset_lst, function(x) isTRUE(nrow(x) > 0))]
saveRDS(dataset_lst, file = "my_data.rds")
readRDS(file = "my_data.rds")
3+4
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
# cache=TRUE
read("my_data.rds")
readRDS(file = "my_data.rds")
system("cmd.exe /C dir")
system("cmd.exe /C dir /AH")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(RMySQL)
library(tidyverse)
library(broom)
library(lubridate)
library(stringr)
library(kableExtra)
library(grid)
library(gridExtra)
library(patchwork)
library(XML)
library(RCurl)
library(lutz)
library(suncalc)
con <- dbConnect(
MySQL(), host = "traffic.st47s.com", user = "student",
password = "Sagehen47", dbname = "traffic")
dataset_names <- dbGetQuery(con, "SHOW TABLES")[[1]]
# remove datasets with "_" in the name
dataset_names <- dataset_names[str_detect(dataset_names, "_", negate = TRUE)]
query_sample <- function(dataset_str, percent){
# input is dataset_str (str) with dataset name, and percent (dbl) for the random sample %
# output is the dataframe with a column added for the name of dataset and character NA's
# replaced with NA's
# global variable con is the SQL connection
command <- paste("SELECT * FROM", dataset_str, "WHERE rand() <=", percent,
# in SQL, filter for vehicular stops
" AND type = 'vehicular'",
sep = " ")
df <- dbGetQuery(con, command) %>% mutate(dataset_name = dataset_str)
# do not consider empty datasets
if (dim(df)[1] == 0){
return(NULL)
}
# replace character NA's with NA
if (sum(is.na(df) == 0)){
df[df == "NA"] = NA
}
return(df %>% dplyr::select(-type))
}
dataset_lst <- lapply(dataset_names, query_sample, 0.2)
# will need to save to and load rdata when knitting so that the coefficient results are the same
# remove empty datasets through logical indexing
dataset_lst <- dataset_lst[sapply(dataset_lst, function(x) isTRUE(nrow(x) > 0))]
data.frame(State = c("CA", "NC", "NY", "TN", "WA"),
`Outlawing racial profiling` = c("Yes", "No", "Yes", "Yes", "Yes"),
`Use officer perception` = c("Yes", "Does not mention",  "Yes",
"Yes", "Does not mention"),
`Bill number` = c("AB 953", "GS 143B", "A03949", "HB 2167", "RCW 43.101.410")) %>%
kbl(booktabs = T, caption = "State Mandates for Traffic Stop Data Collection") %>%
kable_styling(latex_options = "hold_position")
dataset_lst[[1]]
dataset_lst[[1]]$time[1]
dataset_lst[[1]]
dataset_lst[[1]]$time[2]
round(1.3456, digits = 2)
paste(3, "3")
paste(3, "3", "%", sep = "")
paste(3, "3", "%   (", sep = "")[1:3]
substr(paste(3, "3", "%   (", sep = "")[1:3], 1, 2)
substr(paste(3, "3", "%   (", sep = ""), 1,2)
substr("2.109 (39495)", 1, 5)
as.numeric(substr("2.109 (39495)", 1, 5))
knitr::opts_chunk$set(echo = TRUE)
library(tools)
diffr("Final paper.Rmd", "hardin revisions final paper.Rmd")
md5sum("Final paper.Rmd") == md5sum("hardin revisions final paper.Rmd")
library(diffr)
install.packages("diffr")
library(diffr)
diffr("Final paper.Rmd", "hardin revisions final paper.Rmd")
